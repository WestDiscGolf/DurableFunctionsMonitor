{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","DateTimeHelpers.ts","states/DurableOrchestrationStatus.ts","states/ErrorMessageState.ts","services/BackendClient.ts","states/LoginState.ts","states/OrchestrationsState.ts","components/OrchestrationLink.tsx","CancelToken.ts","theme.ts","components/Orchestrations.tsx","components/DurableEntityButtons.tsx","components/DurableEntityFields.tsx","components/OrchestrationButtons.tsx","components/OrchestrationFields.tsx","components/OrchestrationDetails.tsx","components/PurgeHistoryDialog.tsx","components/CleanEntityStorageDialog.tsx","components/Main.tsx","states/MainMenuState.ts","states/MermaidDiagramTabState.ts","states/SequenceDiagramTabState.ts","states/GanttDiagramTabState.ts","states/LiquidMarkupTabState.ts","states/OrchestrationDetailsState.ts","states/PurgeHistoryDialogState.ts","states/CleanEntityStorageDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","states/MainState.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","LoginIcon","observer","React","render","state","this","props","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","fontSize","DialogContentText","allowedTaskHubNames","DialogTitle","List","hubName","ListItem","button","Link","href","locationPathName","CircularProgress","ErrorMessage","action","bound","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","IconButton","key","aria-label","MainMenu","componentDidMount","setWindowTitle","showConnectionParamsDialog","showPurgeHistoryDialog","showCleanEntityStorageDialog","connectionParamsDialogOpen","inProgress","LinearProgress","height","isReadonly","TextField","autoFocus","margin","label","fullWidth","disabled","InputProps","readOnly","InputLabelProps","shrink","value","onChange","target","connectionString","DialogActions","saveConnectionParams","isDirty","DateTimeHelpers","t","isValid","result","moment","toISOString","slice","utc","isAfter","MinMoment","isBefore","MaxMoment","dt","HistoryEventFields","DurableOrchestrationStatus","instanceId","name","entityId","runtimeStatus","entityType","lastEvent","input","customStatus","output","createdTime","lastUpdatedTime","historyEvents","tabTemplateNames","DurableOrchestrationStatusFields","ErrorMessageState","observable","RoutePrefix","DfmClientConfig","routePrefix","BackendUri","process","BackendClient","_getTaskHubName","constructor","_getAuthorizationHeaderAsync","call","method","url","data","Promise","reject","then","headers","axios","request","r","FilterOperatorEnum","ShowEntityTypeEnum","LoginState","_isLoggedIn","_userName","_taskHubName","_allowedTaskHubNames","window","location","pathname","pos","lastIndexOf","substring","endsWith","super","_aadApp","login","uri","get","response","loginWithEasyAuthConfig","err","getAuthorizationHeaderAsync","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","console","log","idToken","rawIdToken","Authorization","acquireTokenRedirect","config","Msal","authority","redirectUri","getRootUri","handleRedirectCallback","authErr","accountState","errorCode","account","getAccount","initializeTaskHubNameAndConfirmLogin","loginRedirect","tryGetTaskHubName","hubNames","length","toLowerCase","pathParts","split","filter","p","origin","computed","OrchestrationLink","backendClient","isVsCode","onLinkClicked","orchestrationId","routePrefixAndTaskHubName","extraSanitizeHrefComponent","s","replace","CancelToken","OrchestrationsState","_hiddenColumns","_cancelToken","isCancelled","_orchestrations","_autoRefresh","val","_localStorage","setItem","toString","loadOrchestrations","_timeFrom","resetOrderBy","_timeTill","reloadOrchestrations","_orderByDirection","_orderBy","_filterValue","_filterOperator","_filteredColumn","_showEntityType","_oldFilterValue","_backendClient","momentFrom","_noMorePagesToLoad","_pageSize","_autoRefreshToken","_oldTimeFrom","_oldTimeTill","timeFromString","getItem","subtract","timeTillString","filteredColumnString","filterOperatorString","filterValueString","showEntityTypeString","autoRefreshString","Number","orderByString","orderByDirectionString","hiddenColumnsString","hideColumn","push","join","unhide","removeItem","applyTimeFrom","isValidMoment","applyTimeTill","applyFilterValue","setItems","fieldName","cancel","isAutoRefresh","cancelToken","timeFrom","timeTill","filterClause","OrchestrationsOnly","DurableEntitiesOnly","Equals","StartsWith","Contains","skip","orderByClause","orderByDirection","hiddenColumnsClause","clearTimeout","setTimeout","finally","ShowBoth","Theme","createMuiTheme","palette","type","theme","RuntimeStatusToStyle","status","backgroundColor","hexToRGBA","error","light","success","warning","background","paper","hex","alpha","parseInt","toFixed","Orchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","AppBar","position","Toolbar","variant","Grid","container","item","xs","style","marginLeft","ampm","autoOk","invalidDateMessage","format","momentAsUtc","onBlur","onAccept","onKeyPress","handleKeyPress","FormControl","InputLabel","htmlFor","Checkbox","checked","timeTillEnabled","placeholder","Select","filteredColumn","inputProps","col","filterOperator","filterValue","RadioGroup","showEntityType","FormControlLabel","control","Radio","flex","autoRefresh","size","FormHelperText","orchestrations","hiddenColumns","component","Paper","elevation","renderTable","renderEmptyTable","visibleColumns","f","showLastEventColumn","Table","TableHead","TableRow","onlyOneVisibleColumnLeft","includes","TableCell","onMouseEnter","columnUnderMouse","onMouseLeave","TableSortLabel","active","orderBy","direction","TableBody","orchestration","rowStyle","cellStyle","verticalAlign","InputBase","multiline","rowsMax","renderJson","event","preventDefault","json","JSON","stringify","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","purge","DurableEntityFields","details","runtimeStatusStyle","sm","md","zeroMinWidth","OrchestrationButtons","restartDialogOpen","rewindConfirmationOpen","terminateConfirmationOpen","raiseEventDialogOpen","setCustomStatusDialogOpen","rewind","terminate","eventName","rows","eventData","raiseEvent","newCustomStatus","setCustomStatus","isCustomStatusDirty","restartWithNewInstanceId","restart","OrchestrationFields","events","index","Timestamp","EventType","SubOrchestrationId","FunctionName","Name","ScheduledTime","Result","Details","OrchestrationDetails","loadDetails","tabStates","Tabs","selectedTabIndex","ev","Tab","tabState","selectedTab","rawHtml","dangerouslySetInnerHTML","__html","getStyledSvg","isMermaidDiagram","description","svg","SaveAsSvgButton","URL","createObjectURL","Blob","download","PurgeHistoryDialog","dialogOpen","instancesDeleted","FormLabel","row","FormGroup","purgeHistory","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","CleanEntityStorageDialog","removeEmptyEntities","releaseOrphanedLocks","clean","numberOfEmptyEntitiesRemoved","numberOfOrphanedLocksRemoved","Main","utils","MomentUtils","loginState","mainMenuState","src","Breadcrumbs","orchestrationDetailsState","Autocomplete","freeSolo","options","isExactMatch","suggestions","typedInstanceId","newValue","goto","renderInput","params","orchestrationsState","purgeHistoryDialogState","cleanEntityStorageDialogState","MainMenuState","_inProgress","_isReadOnly","_oldConnectionString","_oldHubName","_purgeHistoryDialogState","_cleanEntityStorageDialogState","isReadOnly","alert","accountName","version","MermaidDiagramTabState","_diagramCode","_diagramSvg","_loadDetails","load","_mermaidInitialized","mermaid","initialize","startOnLoad","sequence","noteMargin","boxMargin","boxTextMargin","buildDiagram","formatDuration","durationInMs","isNaN","days","Math","floor","c","hours","minutes","seconds","SequenceDiagramTabState","all","getSequenceForOrchestration","sequenceLines","orchestrationName","parentOrchestrationName","results","i","nextLine","formatDateTime","subOrchestrationName","maxDurationInMs","DurationInMs","j","substr","timestamp","GanttDiagramTabState","renderOrchestration","isParentOrchestration","startedEvent","find","completedEvent","needToAddAxisFormat","escapeOrchestrationId","lineName","formatDurationInSeconds","round","LiquidMarkupTabState","_rawHtml","_orchestrationId","OrchestrationDetailsState","_selectedTabIndex","loadCustomTabIfNeeded","_tabStates","_raiseEventDialogOpen","_setCustomStatusDialogOpen","_restartDialogOpen","requestBody","parse","setAutoRefresh","internalLoadDetails","tabStateIndex","orchId","templateName","history","PurgeHistoryDialogState","_dialogOpen","_instancesDeleted","_statuses","Set","statuses","Array","from","values","has","included","add","delete","CleanEntityStorageDialogState","isOpen","_response","TypedLocalStorage","_prefix","localStorage","items","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","random","postMessage","setCustomHandlers","purgeHistoryHandler","cleanEntityStorageHandler","VsCodeTypedLocalStorage","_state","StateFromVsCode","save","MainState","_typedInstanceId","reloadSuggestions","_suggestions","vsCodeApi","acquireVsCodeApi","taskHubName","OrchestrationIdFromVsCode","body","appState","ReactDOM","ThemeProvider","getElementById"],"mappings":"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","file":"static/js/main.276d1832.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 253,\n\t\"./locale.js\": 253\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 537;","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    List, ListItem, Link,\r\n    Menu, MenuItem, Tooltip, Typography, DialogTitle\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage ? (!state.allowedTaskHubNames ? (<>\r\n                            \r\n                            <Container className=\"login-progress\">\r\n                                <CircularProgress />\r\n                            </Container>\r\n                            <DialogContentText>Login in progress...</DialogContentText>\r\n\r\n                        </>) : (<>\r\n                                \r\n                            <DialogTitle>Select your Task Hub</DialogTitle>\r\n                            <List className=\"task-hub-list\">\r\n                                {state.allowedTaskHubNames.map(hubName => (\r\n                                    <ListItem button>\r\n                                        <Link href={state.locationPathName + hubName}>{hubName}</Link>\r\n                                    </ListItem>)\r\n                                )}\r\n                            </List>\r\n                            \r\n                        </>)): (<>\r\n                        \r\n                            <Container className=\"login-progress\">\r\n                                <Error color=\"secondary\" fontSize=\"large\" />\r\n                            </Container>\r\n                            <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            \r\n                        </>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <IconButton color=\"inherit\"\r\n                onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n            >\r\n                <MenuIcon/>\r\n            </IconButton>\r\n\r\n            <Menu\r\n                anchorEl={state.menuAnchorElement}\r\n                keepMounted\r\n                open={!!state.menuAnchorElement}\r\n                onClose={() => state.menuAnchorElement = undefined}\r\n            >\r\n                <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Instance History...</MenuItem>\r\n                <MenuItem onClick={() => state.showCleanEntityStorageDialog()}>Clean Entity Storage...</MenuItem>\r\n            </Menu>\r\n\r\n            <Dialog\r\n                open={state.connectionParamsDialogOpen}\r\n                onClose={() => state.connectionParamsDialogOpen = false}\r\n            >\r\n                <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                    \r\n                    <DialogContentText>\r\n                        {\r\n                            state.isReadonly ?\r\n                                \"Change the below values via your application settings ('DFM_HUB_NAME' and 'AzureWebJobsStorage' respectively)\" :\r\n                                \"The below values will be saved to local.settings.json file.\"\r\n                        }\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Hub Name\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.hubName}\r\n                        onChange={(evt) => state.hubName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Azure Storage Connection String\"\r\n                        fullWidth\r\n                        disabled={state.inProgress}\r\n                        InputProps={{ readOnly: state.isReadonly }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={state.connectionString}\r\n                        onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                    />\r\n\r\n                    <ErrorMessage state={state}/>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n\r\n                    {(!state.isReadonly) && (\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.isDirty || !state.hubName || !state.connectionString || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    )}\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import moment from 'moment';\r\n\r\nexport class DateTimeHelpers\r\n{\r\n    public static momentAsUtc(t: moment.Moment): moment.Moment {\r\n        \r\n        if (!t || !t.isValid()) {\r\n            return t;\r\n        }\r\n\r\n        // Need to convert to UTC, because @material-ui/pickers always give us local moments\r\n        const result = moment(t.toISOString(true).slice(0, 19) + 'Z');\r\n        result.utc();\r\n        return result;\r\n    }\r\n\r\n    // This is the default range for @material-ui/pickers\r\n    private static MinMoment = moment('1900-01-01').utc();\r\n    private static MaxMoment = moment('2100-01-01').utc();\r\n\r\n    public static isValidMoment(t: moment.Moment): boolean {\r\n        return !!t && t.isValid() && t.isAfter(DateTimeHelpers.MinMoment) && t.isBefore(DateTimeHelpers.MaxMoment);\r\n    }\r\n\r\n    public static formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    FunctionName: string;\r\n    ScheduledTime: string;\r\n    DurationInMs: number;\r\n    SubOrchestrationId: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport type RuntimeStatus = \"Running\" | \"Completed\" | \"ContinuedAsNew\" | \"Failed\" | \"Canceled\" | \"Terminated\" | \"Pending\";\r\n\r\nexport type EntityType = \"Orchestration\" | \"DurableEntity\";\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    historyEvents?: HistoryEvent[];\r\n    tabTemplateNames?: string[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmClientConfig: { routePrefix: string };\r\n\r\nconst RoutePrefix = !process.env.REACT_APP_BACKEND_BASE_URI ? (!DfmClientConfig.routePrefix ? '/' : `/${DfmClientConfig.routePrefix}/`) : process.env.REACT_APP_BACKEND_BASE_URI + '/';\r\nexport const BackendUri = RoutePrefix + process.env.REACT_APP_BACKEND_PATH;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return RoutePrefix + this._getTaskHubName(); }\r\n\r\n    constructor(private _getTaskHubName: () => string, private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendUri + '/' + this._getTaskHubName() + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { BackendUri } from '../services/BackendClient';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmClientConfig: { routePrefix: string };\r\n\r\nexport const OrchestrationsPathPrefix = `/orchestrations/`;\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @computed\r\n    get taskHubName(): string { return this._taskHubName;  }\r\n\r\n    @computed\r\n    get allowedTaskHubNames(): string[] { return this._allowedTaskHubNames; }\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    // Returns window.location.pathname minus DFM's client-side routing\r\n    get locationPathName(): string {\r\n\r\n        var result = window.location.pathname;\r\n\r\n        const pos = result.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos >= 0) {\r\n            result = result.substring(0, pos);\r\n        }\r\n\r\n        if (!result.endsWith('/')) {\r\n            result += '/';\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendUri}/easyauth-config`;\r\n        axios.get(uri).then(response => this.loginWithEasyAuthConfig(response.data), err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n        this._aadApp.logout();\r\n    }\r\n\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<undefined>((resolve, reject) => resolve(undefined));\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    @observable\r\n    private _taskHubName: string;\r\n\r\n    @observable\r\n    private _allowedTaskHubNames: string[];\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    private loginWithEasyAuthConfig(config: {clientId: string, authority: string}) {\r\n\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost and proceed with no auth\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority,\r\n                redirectUri: this.getRootUri()\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, (authErr: Msal.AuthError, accountState: string) => {\r\n\r\n            console.log(`Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`);\r\n        });\r\n\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            this._aadApp.loginRedirect();\r\n\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this.initializeTaskHubNameAndConfirmLogin();\r\n        }\r\n    }\r\n\r\n    private initializeTaskHubNameAndConfirmLogin(): void {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            this._taskHubName = hubName;\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Trying to load the list of allowed Task Hubs from the backend\r\n        this.getAuthorizationHeaderAsync().then(headers => {\r\n\r\n            const uri = `${BackendUri}/task-hub-names`;\r\n            axios.get(uri, { headers }).then(response => {\r\n                \r\n                const hubNames: string[] = response.data;\r\n\r\n                if (hubNames.length === 1) {\r\n                    \r\n                    // Redirecting to that Task Hub\r\n                    window.location.pathname = this.locationPathName + hubNames[0];\r\n                } else {\r\n\r\n                    // Asking the user to choose from\r\n                    this._allowedTaskHubNames = hubNames;\r\n                }\r\n\r\n            }, err => {\r\n                this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n            });\r\n        });\r\n    }\r\n\r\n    // Extracts Task Hub name from window.location.href, still honoring client-side routing and subpaths\r\n    private tryGetTaskHubName(): string {\r\n\r\n        const locationPathName = this.locationPathName;\r\n\r\n        // If current path ends with DfmRoutePrefix, then it doesn't actually contain Task Hub name\r\n        if (!!DfmClientConfig.routePrefix && locationPathName.toLowerCase().endsWith(`/${DfmClientConfig.routePrefix.toLowerCase()}/`)) {\r\n            return null;\r\n        }\r\n\r\n        const pathParts = locationPathName.split('/').filter(p => !!p);\r\n        if (pathParts.length < 1) {\r\n            return null;\r\n        }\r\n\r\n        // Consider the last path part to be the Task Hub name.\r\n        // This should work even if we're hosted under some subpath\r\n        return pathParts[pathParts.length - 1];\r\n    }\r\n\r\n    // Returns the site's root URI (everything _before_ Task Hub name)\r\n    private getRootUri(): string {\r\n\r\n        const hubName = this.tryGetTaskHubName();\r\n        if (!!hubName) {\r\n\r\n            const pos = window.location.href.toLowerCase().lastIndexOf('/' + hubName.toLowerCase());\r\n            if (pos >= 0) {\r\n                return window.location.href.substring(0, pos);\r\n            }\r\n        }\r\n\r\n        return window.location.origin + window.location.pathname;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { CancelToken } from '../CancelToken';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains\r\n}\r\n\r\nexport enum ShowEntityTypeEnum {\r\n    ShowBoth = 0,\r\n    OrchestrationsOnly,\r\n    DurableEntitiesOnly\r\n}\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get hiddenColumns(): string[] { return this._hiddenColumns; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._cancelToken.inProgress && !this._cancelToken.isCancelled; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): moment.Moment { return this._timeFrom; }\r\n    set timeFrom(val: moment.Moment) {\r\n        this._timeFrom = val;\r\n        this.resetOrderBy();\r\n    }\r\n\r\n    @computed\r\n    get timeTill(): moment.Moment { return (!this._timeTill) ? moment().utc() : this._timeTill; }\r\n    set timeTill(val: moment.Moment) {\r\n        this._timeTill = val;\r\n        this.resetOrderBy();\r\n    }\r\n    \r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? moment().utc() : null;\r\n\r\n        if (!val) {\r\n            this.resetOrderBy();\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n    \r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection;}\r\n\r\n    @computed\r\n    get orderBy() : string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val) {\r\n            \r\n            this._orderBy = val;\r\n            this._orderByDirection = 'asc';\r\n\r\n        } else if (this._orderByDirection === 'desc') {\r\n\r\n            this.resetOrderBy();\r\n        }\r\n        else {\r\n            this._orderByDirection = 'desc';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showEntityType(): string { return ShowEntityTypeEnum[this._showEntityType]; }\r\n    set showEntityType(val: string) {\r\n\r\n        this._showEntityType = ShowEntityTypeEnum[val];\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n\r\n    @observable\r\n    columnUnderMouse: string;\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState>) {\r\n        super();\r\n        \r\n        var momentFrom: moment.Moment;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            momentFrom = moment(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            momentFrom = moment().subtract(1, 'days');\r\n        }\r\n        momentFrom.utc();\r\n\r\n        this._timeFrom = momentFrom;\r\n        this._oldTimeFrom = momentFrom;\r\n       \r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = moment(timeTillString);\r\n            this._timeTill.utc();\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showEntityTypeString = this._localStorage.getItem('showEntityType');\r\n        if (!!showEntityTypeString) {\r\n            this._showEntityType = ShowEntityTypeEnum[showEntityTypeString];\r\n        }\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n\r\n        const hiddenColumnsString = this._localStorage.getItem('hiddenColumns');\r\n        if (!!hiddenColumnsString) {\r\n            this._hiddenColumns = hiddenColumnsString.split('|');\r\n        }\r\n\r\n    }\r\n\r\n    hideColumn(name: string) {\r\n        this._hiddenColumns.push(name);\r\n        this._localStorage.setItem('hiddenColumns', this._hiddenColumns.join('|'));\r\n    }\r\n\r\n    unhide() {\r\n        this._hiddenColumns = [];\r\n        this._localStorage.removeItem('hiddenColumns');\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeFrom) && this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeTill) && this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n\r\n        // If dates are invalid, reverting them to previous valid values\r\n        if (!DateTimeHelpers.isValidMoment(this._timeFrom)) {\r\n            this._timeFrom = this._oldTimeFrom;\r\n        }\r\n        if (!!this._timeTill && !DateTimeHelpers.isValidMoment(this._timeTill)) {\r\n            this._timeTill = this._oldTimeTill;\r\n        }\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'timeTill', value: !!this._timeTill ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showEntityType', value: ShowEntityTypeEnum[this._showEntityType] },\r\n            { fieldName: 'orderBy', value: this._orderBy },\r\n            { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    cancel() {\r\n        this._cancelToken.isCancelled = true;\r\n        this._cancelToken = new CancelToken();\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        const cancelToken = this._cancelToken;\r\n        if (!!cancelToken.inProgress || (!!this._noMorePagesToLoad && !this._autoRefresh )) {\r\n            return;            \r\n        }\r\n        cancelToken.inProgress = true;\r\n        \r\n        const timeFrom = this._timeFrom.toISOString();\r\n        const timeTill = !!this._timeTill ? this._timeTill.toISOString() : moment().utc().toISOString();\r\n        var filterClause = `&$filter=createdTime ge '${timeFrom}' and createdTime le '${timeTill}'`;\r\n\r\n        if (this._showEntityType === ShowEntityTypeEnum.OrchestrationsOnly) {\r\n            filterClause += ` and entityType eq 'Orchestration'`;\r\n        }\r\n        else if (this._showEntityType === ShowEntityTypeEnum.DurableEntitiesOnly) {\r\n            filterClause += ` and entityType eq 'DurableEntity'`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n        const hiddenColumnsClause = !this._hiddenColumns.length ? '' : `&hidden-columns=${this._hiddenColumns.join('|')}`; \r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}${hiddenColumnsClause}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!cancelToken.isCancelled)\r\n            {\r\n                if (!response.length) {\r\n\r\n                    // Stop the infinite scrolling\r\n                    this._noMorePagesToLoad = true;\r\n\r\n                } else {\r\n\r\n                    if (isAutoRefresh) {\r\n                        this._orchestrations = response;\r\n                    } else {\r\n                        this._orchestrations.push(...response);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadOrchestrations(true), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            if (!cancelToken.isCancelled) {\r\n                this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }\r\n\r\n        }).finally(() => {\r\n            cancelToken.inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _cancelToken: CancelToken = new CancelToken();\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    @observable\r\n    private _timeFrom: moment.Moment;\r\n    @observable\r\n    private _timeTill: moment.Moment;\r\n\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n    @observable\r\n    private _showEntityType: ShowEntityTypeEnum = ShowEntityTypeEnum.ShowBoth;\r\n\r\n    @observable\r\n    private _hiddenColumns: string[] = [];\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _oldFilterValue: string = '';\r\n\r\n    private _oldTimeFrom: moment.Moment;\r\n    private _oldTimeTill: moment.Moment;\r\n\r\n    private resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { OrchestrationsPathPrefix } from '../states/LoginState';\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, title?: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link href=\"/\" onClick={this.onLinkClicked} >\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link href={`${this.props.backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this.extraSanitizeHrefComponent(this.props.orchestrationId)}`} target=\"_blank\">\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n\r\n    // Just to be extra sure\r\n    private extraSanitizeHrefComponent(s: string): string{\r\n        return s.replace(/javascript:/gi, '');\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\nexport class CancelToken {\r\n    @observable\r\n    inProgress: boolean = false;\r\n    @observable\r\n    isCancelled: boolean = false;\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nimport { RuntimeStatus } from './states/DurableOrchestrationStatus';\r\n\r\n// Config object passed as a global variable\r\ndeclare const DfmClientConfig: { theme: string };\r\n\r\nexport const Theme = createMuiTheme({\r\n    palette: { type: DfmClientConfig.theme === 'dark' ? 'dark': 'light' }\r\n});\r\n\r\nexport function RuntimeStatusToStyle(status: RuntimeStatus): {} {\r\n\r\n    var backgroundColor: string = null;\r\n\r\n    switch (status) {\r\n        case \"Failed\":\r\n            backgroundColor = hexToRGBA(Theme.palette.error.light, 0.2);\r\n            break;\r\n        case \"Completed\":\r\n            backgroundColor = hexToRGBA(Theme.palette.success.light, 0.2);\r\n            break;\r\n        case \"Running\":\r\n            backgroundColor = hexToRGBA(Theme.palette.warning.light, 0.2);\r\n            break;\r\n        case \"Terminated\":\r\n            backgroundColor = hexToRGBA(Theme.palette.background.paper, 0.1);\r\n            break;\r\n    }\r\n\r\n    return !!backgroundColor ? { backgroundColor } : {};\r\n}\r\n\r\nexport function hexToRGBA(hex: string, alpha: number): string {\r\n\r\n    if (hex.length > 4) {\r\n        return `rgba(${parseInt(hex.slice(1, 3), 16)}, ${parseInt(hex.slice(3, 5), 16)}, ${parseInt(hex.slice(5, 7), 16)}, ${alpha.toFixed(1)})`;\r\n    } else {\r\n        return `rgba(${parseInt(hex.slice(1, 2), 16)}, ${parseInt(hex.slice(2, 3), 16)}, ${parseInt(hex.slice(3, 4), 16)}, ${alpha.toFixed(1)})`;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, Checkbox, FormControl, FormControlLabel, FormHelperText, Grid, IconButton, InputBase,\r\n    InputLabel, Link, LinearProgress, MenuItem, Paper, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Typography,\r\n    Radio, RadioGroup\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatusFields } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { OrchestrationsState, ShowEntityTypeEnum } from '../states/OrchestrationsState';\r\n\r\nimport { RuntimeStatusToStyle } from '../theme';\r\n\r\nconst MaxJsonLengthToShow = 1024;\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadOrchestrations();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            \r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <Grid container className=\"toolbar-grid1\">\r\n                        <Grid item xs={12}>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"from-input\"\r\n                                style={{ marginLeft: 10 }}\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"From &nbsp;&nbsp; (UTC)\"\r\n                                invalidDateMessage=\"\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                disabled={state.inProgress}\r\n                                value={state.timeFrom}\r\n                                onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                                onBlur={() => state.applyTimeFrom()}\r\n                                onAccept={() => state.applyTimeFrom()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n                            <FormControl>\r\n                                <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                                <Checkbox\r\n                                    id=\"till-checkbox\"\r\n                                    className=\"till-checkbox\"\r\n                                    disabled={state.inProgress}\r\n                                    checked={state.timeTillEnabled}\r\n                                    onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                                />\r\n                            </FormControl>\r\n\r\n                            {state.timeTillEnabled ? (\r\n                                <KeyboardDateTimePicker\r\n                                    className=\"till-input\"\r\n                                    ampm={false}\r\n                                    autoOk={true}\r\n                                    label=\"(UTC)\"\r\n                                    invalidDateMessage=\"\"\r\n                                    format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                    disabled={state.inProgress}\r\n                                    value={state.timeTill}\r\n                                    onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                                    onBlur={() => state.applyTimeTill()}\r\n                                    onAccept={() => state.applyTimeTill()}\r\n                                    onKeyPress={this.handleKeyPress}\r\n                                />\r\n                            ) : (\r\n                                <TextField\r\n                                    className=\"till-input\"\r\n                                    label=\"(UTC)\"\r\n                                    placeholder=\"[Now]\"\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    type=\"text\"\r\n                                    disabled={true}\r\n                                />\r\n                            )}                        \r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container className=\"toolbar-grid2\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl>\r\n                                <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select filtered-column-input\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filteredColumn}\r\n                                    onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                    inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                    <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                    {DurableOrchestrationStatusFields.map(col => {\r\n                                        return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                    })}\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl className=\"toolbar-grid2-item1-select\">\r\n                                <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filterOperator}\r\n                                    onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                    inputProps={{ id: \"filter-operator-select\" }}>\r\n                                    <MenuItem value={0}>Equals</MenuItem>\r\n                                    <MenuItem value={1}>Starts With</MenuItem>\r\n                                    <MenuItem value={2}>Contains</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n                            <TextField\r\n                                className=\"filter-value-input\"\r\n                                label=\"Filter Value\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                placeholder=\"[some text or 'null']\"\r\n                                disabled={state.filteredColumn === '0' || state.inProgress}\r\n                                value={state.filterValue}\r\n                                onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                                onBlur={() => state.applyFilterValue()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <RadioGroup\r\n                        value={state.showEntityType}\r\n                        onChange={(evt) => state.showEntityType = (evt.target as HTMLInputElement).value}\r\n                    >\r\n                        <FormControlLabel                            \r\n                            className=\"entity-type-radio\"\r\n                            disabled={state.inProgress}\r\n                            value={ShowEntityTypeEnum[ShowEntityTypeEnum.ShowBoth]}\r\n                            control={<Radio />}\r\n                            label={<Typography variant=\"subtitle2\">Show both</Typography>}\r\n                        />\r\n                        <FormControlLabel\r\n                            className=\"entity-type-radio\"\r\n                            disabled={state.inProgress}\r\n                            value={ShowEntityTypeEnum[ShowEntityTypeEnum.OrchestrationsOnly]}\r\n                            control={<Radio />}\r\n                            label={<Typography variant=\"subtitle2\">Orchestrations only</Typography>}\r\n                        />\r\n                        <FormControlLabel\r\n                            className=\"entity-type-radio\"\r\n                            disabled={state.inProgress}\r\n                            value={ShowEntityTypeEnum[ShowEntityTypeEnum.DurableEntitiesOnly]}\r\n                            control={<Radio />}\r\n                            label={<Typography variant=\"subtitle2\">Durable Entities only</Typography>}\r\n                        />\r\n                    </RadioGroup>\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Grid container className=\"toolbar-grid3\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl className=\"form-control-float-right\">\r\n                                <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    inputProps={{ id: \"auto-refresh-select\" }}\r\n                                    value={state.autoRefresh}\r\n                                    onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                                >\r\n                                    <MenuItem value={0}>Never</MenuItem>\r\n                                    <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                    <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                    <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                            <Button\r\n                                className=\"refresh-button form-control-float-right\"\r\n                                variant=\"outlined\"\r\n                                color=\"default\"\r\n                                size=\"large\"\r\n                                onClick={() => state.inProgress ? state.cancel() : state.reloadOrchestrations()}\r\n                            >\r\n                                {state.inProgress ? (<CancelOutlinedIcon />) : (<RefreshIcon />)}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <FormHelperText className=\"items-count-label\">\r\n                {!!state.orchestrations.length && (<>\r\n                    \r\n                    {`${state.orchestrations.length} items shown`}\r\n\r\n                    {!!state.hiddenColumns.length && (<>\r\n                        {`, ${state.hiddenColumns.length} columns hidden `}\r\n                        ( <Link\r\n                                className=\"unhide-button\"\r\n                                component=\"button\"\r\n                                variant=\"inherit\"\r\n                                onClick={() => state.unhide()}\r\n                            >\r\n                                unhide\r\n                        </Link> )\r\n                        \r\n                    </>)}\r\n                </>)}\r\n\r\n            </FormHelperText>\r\n\r\n            <Paper elevation={0} >\r\n                {!!state.orchestrations.length ? this.renderTable(state) : this.renderEmptyTable()}\r\n            </Paper>\r\n\r\n            {state.inProgress && !!state.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Toolbar variant=\"dense\" />\r\n            \r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(state: OrchestrationsState): JSX.Element {\r\n\r\n        const visibleColumns = DurableOrchestrationStatusFields\r\n            // hiding artificial 'lastEvent' column, when not used\r\n            .filter(f => state.showLastEventColumn ? true : f !== 'lastEvent');\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {visibleColumns.map(col => {\r\n\r\n                            const onlyOneVisibleColumnLeft = visibleColumns.length <= state.hiddenColumns.length + 1;\r\n\r\n                            return !state.hiddenColumns.includes(col) && (\r\n                                <TableCell key={col}\r\n                                    onMouseEnter={() => state.columnUnderMouse = col}\r\n                                    onMouseLeave={() => state.columnUnderMouse = ''}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={state.orderBy === col}\r\n                                        direction={state.orderByDirection}\r\n                                        onClick={() => state.orderBy = col}\r\n                                    >\r\n                                        {col}\r\n                                    </TableSortLabel>\r\n\r\n                                    {state.columnUnderMouse === col && !onlyOneVisibleColumnLeft && (\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size=\"small\"\r\n                                            className=\"column-hide-button\"\r\n                                            onClick={() => state.hideColumn(col)}\r\n                                        >\r\n                                            <CloseIcon />\r\n                                        </IconButton>                                        \r\n                                    )}\r\n\r\n                                </TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const rowStyle = RuntimeStatusToStyle(orchestration.runtimeStatus);\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                style={rowStyle}\r\n                            >\r\n                                {!state.hiddenColumns.includes('instanceId') && (\r\n                                    <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                        <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={state.backendClient} />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('name') && (\r\n                                    <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                        {orchestration.name}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('createdTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {orchestration.createdTime}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('lastUpdatedTime') && (\r\n                                    <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                        {orchestration.lastUpdatedTime}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('runtimeStatus') && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.runtimeStatus}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('lastEvent') && state.showLastEventColumn && (\r\n                                    <TableCell style={cellStyle}>\r\n                                        {orchestration.lastEvent}\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('input') && (\r\n                                    <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={this.renderJson(orchestration.input)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('output') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={this.renderJson(orchestration.output)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                                {!state.hiddenColumns.includes('customStatus') && (\r\n                                    <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                        <InputBase\r\n                                            className=\"long-text-cell-input\"\r\n                                            multiline fullWidth rowsMax={5} readOnly\r\n                                            value={this.renderJson(orchestration.customStatus)}\r\n                                        />\r\n                                    </TableCell>\r\n                                )}\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    private renderJson(json: any): string {\r\n\r\n        const result = JSON.stringify(json);\r\n\r\n        return result.length > MaxJsonLengthToShow ? `[${result.length} symbols long JSON]` : result;\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Grid, TextField } from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId?.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId?.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n    FormControlLabel, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState, disabled: boolean }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.restartDialogOpen = true}>\r\n                Restart\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.raiseEventDialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.setCustomStatusDialogOpen = true}>\r\n                Set Custom Status\r\n            </Button>\r\n            <Box width={10} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" disabled={this.props.disabled} onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.setCustomStatusDialogOpen}\r\n                onClose={() => state.setCustomStatusDialogOpen = false}\r\n            >\r\n                <DialogTitle>Set customStatus</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        customStatus field is a way for external clients to differentiate instances of your orchestration. It does not affect the orchestration workflow itself.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        label=\"New customStatus (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={10}\r\n                        value={state.newCustomStatus}\r\n                        onChange={(evt) => state.newCustomStatus = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.setCustomStatusDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.setCustomStatus()} disabled={!state.isCustomStatusDirty} color=\"secondary\">\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.restartDialogOpen}\r\n                onClose={() => state.restartDialogOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Restart</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to restart orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n\r\n                    <FormControlLabel control={<Checkbox\r\n                        checked={state.restartWithNewInstanceId}\r\n                        onChange={(evt) => state.restartWithNewInstanceId = evt.target.checked} />}\r\n                        label=\"Restart with new instanceId\"\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.restartDialogOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.restart()} color=\"secondary\">\r\n                        Restart\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, InputBase, Table, TableBody, TableCell, TableHead, TableRow, Typography, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEventFields } from '../states/DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { RuntimeStatusToStyle } from '../theme';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ details: DurableOrchestrationStatus, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        const runtimeStatusStyle = RuntimeStatusToStyle(details.runtimeStatus);\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={runtimeStatusStyle}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: {!!details.historyEvents ? details.historyEvents.length : 0} items\r\n            </FormHelperText>\r\n\r\n            {this.renderTable(details.historyEvents)}\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(events: Array<any> | undefined): JSX.Element {\r\n\r\n        if (!events || !events.length) {\r\n            return this.renderEmptyTable();\r\n        }\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return <TableCell key={col}>{col}</TableCell>;\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: any, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n\r\n                                    {!!event.SubOrchestrationId ?\r\n                                        (<OrchestrationLink\r\n                                            orchestrationId={event.SubOrchestrationId}\r\n                                            title={event.FunctionName}\r\n                                            backendClient={this.props.backendClient} />)\r\n                                        :\r\n                                        (event.Name ?? event.FunctionName)\r\n                                    }\r\n\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, FormControl, InputLabel, LinearProgress, MenuItem, Paper,\r\n    Select, Tabs, Tab, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { Theme, hexToRGBA } from '../theme';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            <AppBar color=\"inherit\" position=\"static\" className=\"top-appbar\">\r\n\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    {state.details.entityType === \"Orchestration\" && (\r\n                        <OrchestrationButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    {state.details.entityType === \"DurableEntity\" && (\r\n                        <DurableEntityButtons state={state} disabled={state.inProgress} />\r\n                    )}\r\n                    \r\n                    <Box width={20} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                            inputProps={{ id: 'auto-refresh-select' }}>\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <Button\r\n                        className=\"details-refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        disabled={state.inProgress}\r\n                        onClick={() => state.loadDetails()}\r\n                    >\r\n                        <RefreshIcon />\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {!!state.tabStates.length && (<>\r\n                <AppBar color=\"inherit\" position=\"static\">\r\n                    <Tabs value={state.selectedTabIndex} onChange={(ev: React.ChangeEvent<{}>, val) => state.selectedTabIndex = val}>\r\n                        \r\n                        <Tab className=\"tab-title\" label=\"Details\" disabled={state.inProgress} />\r\n                        \r\n                        {state.tabStates.map(tabState => (\r\n                            <Tab className=\"tab-title\" key={tabState.name} label={tabState.name} disabled={state.inProgress} />\r\n                        ))}\r\n\r\n                    </Tabs>\r\n                </AppBar>\r\n            </>)}\r\n\r\n            {!state.selectedTabIndex && state.details.entityType === \"Orchestration\" &&\r\n                (<OrchestrationFields details={state.details} backendClient={state.backendClient} />)\r\n            }\r\n            {!state.selectedTabIndex && state.details.entityType === \"DurableEntity\" &&\r\n                <DurableEntityFields details={state.details} />\r\n            }\r\n\r\n            {!!state.selectedTab && !!state.selectedTab.rawHtml && (<>\r\n\r\n                <div\r\n                    className=\"raw-html-div\"\r\n                    style={\r\n                        Theme.palette.type === \"dark\" ? {\r\n                            backgroundColor: '#aaa'\r\n                        } : {}\r\n                    }\r\n                    dangerouslySetInnerHTML={{ __html: this.getStyledSvg(state.selectedTab.rawHtml) }}\r\n                />\r\n                \r\n                {state.selectedTab.isMermaidDiagram && (\r\n\r\n                    <Toolbar variant=\"dense\">\r\n                        <TextField\r\n                            label=\"mermaid diagram code (for your reference)\"\r\n                            value={state.selectedTab.description}\r\n                            margin=\"normal\"\r\n                            InputProps={{ readOnly: true }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            rowsMax={4}\r\n                        />\r\n\r\n                        <Box width={20} />\r\n\r\n                        <SaveAsSvgButton\r\n                            svg={this.getStyledSvg(state.selectedTab.rawHtml)}\r\n                            orchestrationId={state.orchestrationId}\r\n                            inProgress={state.inProgress}\r\n                            backendClient={state.backendClient}\r\n                        />\r\n\r\n                    </Toolbar>\r\n                )}\r\n                \r\n            </>)}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n\r\n    // Appends some styling to SVG code, so it can also be saved as file\r\n    private getStyledSvg(svg: string): string {\r\n\r\n        return svg.replace('</style>',\r\n            '.note { stroke: none !important; fill: none !important; } ' +\r\n            '.noteText { font-size: 9px !important; } ' +\r\n            '</style>'\r\n        );\r\n    }\r\n}\r\n\r\nclass SaveAsSvgButton extends React.Component<{ svg: string, orchestrationId: string, inProgress: boolean, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    size=\"large\"\r\n                    className=\"save-svg-button\"\r\n                    disabled={this.props.inProgress}\r\n                    onClick={() => this.props.backendClient.call('SaveAs', this.props.orchestrationId + '.svg', this.props.svg)}\r\n                >\r\n                    <div>\r\n                        <SaveIcon />\r\n                        <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                    </div>\r\n                </Button>\r\n            );\r\n\r\n        } else {\r\n\r\n            return (\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    size=\"large\"\r\n                    className=\"save-svg-button\"\r\n                    disabled={this.props.inProgress}\r\n                    href={URL.createObjectURL(new Blob([this.props.svg], { type: 'image/svg+xml' }))}\r\n                    download={this.props.orchestrationId + '.svg'}\r\n                >\r\n                    <div>\r\n                        <SaveIcon />\r\n                        <Typography color=\"inherit\">Save as .SVG</Typography>\r\n                    </div>\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, Radio, RadioGroup, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { EntityType, RuntimeStatus } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops instance states from the underlying storage and cannot be undone.\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <Typography color=\"error\" >\r\n                                        It might as well remove Durable Entities, that are still active.\r\n                                        Ensure that you specify the correct time frame!\r\n                                        To clean up deleted Entities use the 'Clean Entity Storage' command instead. \r\n                                    </Typography>\r\n                                )}\r\n\r\n                            </DialogContentText>\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress} fullWidth>\r\n                                <FormLabel>Apply to:</FormLabel>\r\n                                <RadioGroup row\r\n                                    value={state.entityType}\r\n                                    onChange={(evt) => state.entityType = (evt.target as HTMLInputElement).value as EntityType}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"Orchestration\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Orchestrations\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"DurableEntity\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Durable Entities\"\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-from-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? 'Last Updated From (UTC)' : 'From (UTC)'}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeFrom}\r\n                                onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label={state.entityType === 'DurableEntity' ? 'Last Updated Till (UTC)' : 'Till (UTC)'}\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeTill}\r\n                                onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>With the following status:</FormLabel>\r\n\r\n                                {state.entityType === 'Orchestration' && (\r\n                                    <FormGroup row>\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n                                    </FormGroup>\r\n                                )}\r\n\r\n                                {state.entityType === 'DurableEntity' && (\r\n                                    <FormGroup row>\r\n                                        <Tooltip title=\"Durable Entities are always in 'Running' state\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox\r\n                                                    checked={true} />}\r\n                                                label=\"Running\"\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, LinearProgress, \r\n} from '@material-ui/core';\r\n\r\nimport './CleanEntityStorageDialog.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { CleanEntityStorageDialogState } from '../states/CleanEntityStorageDialogState';\r\n\r\n// Dialog with parameters for cleaning entity storage\r\n@observer\r\nexport class CleanEntityStorageDialog extends React.Component<{ state: CleanEntityStorageDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Clean Entity Storage</DialogTitle>\r\n\r\n                {!state.response && (<>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                        <DialogContentText>\r\n                            An entity is considered empty, and is removed, if it has no state, is not locked, and has been idle for more than EntityMessageReorderWindowInMinutes. Locks are considered orphaned, and are released, if the orchestration that holds them is not in state Running.\r\n                        </DialogContentText>\r\n\r\n                        <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                            <FormGroup row>\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.removeEmptyEntities}\r\n                                    onChange={(evt) => state.removeEmptyEntities = evt.target.checked} />}\r\n                                    label=\"Remove Empty Entities\"\r\n                                />\r\n\r\n                                <FormControlLabel control={<Checkbox\r\n                                    checked={state.releaseOrphanedLocks}\r\n                                    onChange={(evt) => state.releaseOrphanedLocks = evt.target.checked} />}\r\n                                    label=\"Release Orphaned Locks\"\r\n                                />\r\n                                \r\n                            </FormGroup>\r\n                        </FormControl>\r\n\r\n                        <ErrorMessage state={state} />\r\n\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => state.clean()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                            Clean\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n                {!!state.response && (<>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfEmptyEntitiesRemoved} empty entities removed. \r\n                        </DialogContentText>\r\n                        <DialogContentText className=\"success-message\">\r\n                            {state.response.numberOfOrphanedLocksRemoved} orphaned locks removed.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>)}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\nimport { CleanEntityStorageDialog } from './CleanEntityStorageDialog';\r\n\r\n// DFM-specific route prefix, that is passed to us from the backend via a global static variable\r\ndeclare const DfmClientConfig: { routePrefix: string };\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <MuiPickersUtilsProvider utils={MomentUtils}><>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} />\r\n                            )}\r\n\r\n                            <img src={`${!DfmClientConfig.routePrefix ? '' : '/' + DfmClientConfig.routePrefix}/logo.svg`} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                Durable Functions Monitor\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href={state.loginState.locationPathName}>\r\n                                    / instances\r\n                                </Link>\r\n\r\n                                {!state.orchestrationDetailsState ?\r\n                                    (\r\n                                        <Autocomplete\r\n                                            className=\"instance-id-input\"\r\n                                            freeSolo\r\n                                            options={state.isExactMatch ? [] : state.suggestions}\r\n                                            value={state.typedInstanceId}\r\n                                            onChange={(evt, newValue) => {\r\n                                                state.typedInstanceId = newValue ?? '';\r\n                                                if (!!newValue) {\r\n                                                    state.goto();\r\n                                                }\r\n                                            }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    className={state.isExactMatch ? 'instance-id-valid' : null}\r\n                                                    size=\"small\"\r\n                                                    label=\"instanceId to go to...\"\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={(evt) => state.typedInstanceId = evt.target.value as string}\r\n                                                    onKeyPress={(evt) => this.handleKeyPress(evt)}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    )\r\n                                    :\r\n                                    (<Typography color=\"inherit\">\r\n                                        {state.orchestrationDetailsState.orchestrationId}\r\n                                    </Typography>)\r\n                                }\r\n\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n                <CleanEntityStorageDialog state={state.cleanEntityStorageDialogState} />\r\n\r\n            </></MuiPickersUtilsProvider>\r\n        );\r\n    }\r\n\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.goto();\r\n        }\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n    \r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient,\r\n        private _purgeHistoryDialogState: PurgeHistoryDialogState,\r\n        private _cleanEntityStorageDialogState: CleanEntityStorageDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = this._oldConnectionString = response.connectionString;\r\n            this.hubName = this._oldHubName = response.hubName;\r\n            this._isReadOnly = response.isReadOnly;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    showCleanEntityStorageDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this._cleanEntityStorageDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n    \r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { observable, computed } from 'mobx';\r\nimport mermaid from 'mermaid';\r\n\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\n\r\n// Base class for all mermaid diagram tab states\r\nexport abstract class MermaidDiagramTabState implements ICustomTabState {\r\n\r\n    readonly name: string = \"Diagram\";\r\n    readonly isMermaidDiagram: boolean = true;\r\n\r\n    @computed\r\n    get description(): string { return this._diagramCode; };\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._diagramSvg; };\r\n\r\n    constructor(protected _loadDetails: (orchestrationId: string) => Promise<DurableOrchestrationStatus>) {\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus) : Promise<void> {\r\n\r\n        // Only doing this on demand, just in case\r\n        if (!MermaidDiagramTabState._mermaidInitialized) {\r\n\r\n            mermaid.initialize({\r\n                startOnLoad: true,\r\n                sequence: {\r\n                    noteMargin: 0,\r\n                    boxMargin: 5,\r\n                    boxTextMargin: 5\r\n                }\r\n            });\r\n            MermaidDiagramTabState._mermaidInitialized = true;\r\n        }\r\n\r\n        if (!details.historyEvents) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.buildDiagram(details);\r\n    }\r\n\r\n    @observable\r\n    protected _diagramCode: string;\r\n    @observable\r\n    protected _diagramSvg: string;\r\n\r\n    private static _mermaidInitialized = false;\r\n\r\n    protected abstract buildDiagram(details: DurableOrchestrationStatus): Promise<void>;\r\n\r\n    protected formatDuration(durationInMs: number): string {\r\n\r\n        var result = '';\r\n        if (isNaN(durationInMs) || (durationInMs < 0)) {\r\n            return result;\r\n        }\r\n\r\n        const days = Math.floor(durationInMs / 86400000);\r\n        if (days > 30) {\r\n            // something went wrong...\r\n            return result;\r\n        }\r\n\r\n        var c = 0;\r\n\r\n        if (days > 0) {\r\n            result += days.toFixed(0) + 'd';\r\n            ++c;\r\n            durationInMs = durationInMs % 86400000;\r\n        }\r\n\r\n        const hours = Math.floor(durationInMs / 3600000);\r\n        if (hours > 0) {\r\n            result += hours.toFixed(0) + 'h';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n            \r\n            durationInMs = durationInMs % 3600000;\r\n        }\r\n\r\n        const minutes = Math.floor(durationInMs / 60000);\r\n        if (minutes > 0) {\r\n            result += minutes.toFixed(0) + 'm';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 60000;\r\n        }\r\n\r\n        const seconds = Math.floor(durationInMs / 1000);\r\n        if (seconds > 0) {\r\n            result += seconds.toFixed(0) + 's';\r\n\r\n            if (++c > 1) {\r\n                return `(${result})`;\r\n            }\r\n\r\n            durationInMs = durationInMs % 1000;\r\n        }\r\n\r\n        if (durationInMs > 0) {\r\n            result += durationInMs.toFixed(0) + 'ms';\r\n        }\r\n\r\n        return `(${result})`;\r\n    }\r\n}","import mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\n\r\n// State of Sequence Diagram tab on OrchestrationDetails view\r\nexport class SequenceDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Sequence Diagram\";\r\n\r\n    constructor(loadDetails: (orchestrationId: string) => Promise<DurableOrchestrationStatus>) {\r\n        super(loadDetails);\r\n    }\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus) : Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.getSequenceForOrchestration(details.name, '.', details.historyEvents)).then(sequenceLines => {\r\n\r\n                this._diagramCode = 'sequenceDiagram \\n' + sequenceLines.join('');\r\n\r\n                try {\r\n\r\n                    // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                    this._diagramSvg = '';\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private getSequenceForOrchestration(orchestrationName: string,\r\n        parentOrchestrationName: string,\r\n        historyEvents: HistoryEvent[]): Promise<string>[] {\r\n\r\n        const externalActor = '.'\r\n        const results: Promise<string>[] = [];\r\n\r\n        var i = 0;\r\n        while (i < historyEvents.length) {\r\n            const event = historyEvents[i];\r\n\r\n            switch (event.EventType) {\r\n                case 'ExecutionStarted':\r\n\r\n                    var nextLine =\r\n                        `${parentOrchestrationName}->>+${orchestrationName}:[ExecutionStarted] \\n` +\r\n                        `Note over ${parentOrchestrationName},${orchestrationName}: ${this.formatDateTime(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadDetails(event.SubOrchestrationId).then(details => {\r\n\r\n                                Promise.all(this.getSequenceForOrchestration(details.name, orchestrationName, details.historyEvents)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`${orchestrationName}-x${subOrchestrationName}:[FailedToLoad] \\n`);\r\n                            });\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'SubOrchestrationInstanceFailed':\r\n\r\n                    var nextLine = `${orchestrationName}-x${event.FunctionName}:[SubOrchestrationInstanceFailed] \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    // Trying to aggregate multiple parallel calls\r\n                    var maxDurationInMs = event.DurationInMs;\r\n                    var j = i + 1;\r\n                    for (; j < historyEvents.length &&\r\n                        historyEvents[j].EventType === 'TaskCompleted' &&\r\n                        historyEvents[j].FunctionName === event.FunctionName &&\r\n                        historyEvents[j].ScheduledTime.substr(0, 23) === event.ScheduledTime.substr(0, 23);\r\n                        j++) {\r\n\r\n                        if (maxDurationInMs < historyEvents[j].DurationInMs) {\r\n                            maxDurationInMs = historyEvents[j].DurationInMs;\r\n                        }\r\n                    }\r\n\r\n                    if (j === i + 1) {\r\n\r\n                        const nextLine =\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n                        \r\n                    } else {\r\n\r\n                        const nextLine =\r\n                            `par ${j - i} calls \\n` +\r\n                            `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n` +\r\n                            `Note over ${orchestrationName}: ${this.formatDuration(maxDurationInMs)} \\n` +\r\n                            `end \\n`;\r\n                        results.push(Promise.resolve(nextLine));\r\n\r\n                        i = j - 1;\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    var nextLine = `${orchestrationName}-x${orchestrationName}:${event.FunctionName}(failed) \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'EventRaised':\r\n\r\n                    var nextLine =\r\n                        `${externalActor}->>${orchestrationName}:${event.Name} \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatDateTime(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TimerFired':\r\n\r\n                    var nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[TimerFired] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatDateTime(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionTerminated':\r\n\r\n                    var nextLine =\r\n                        `${externalActor}->>${orchestrationName}:[ExecutionTerminated] \\n` +\r\n                        `Note over ${externalActor},${orchestrationName}: ${this.formatDateTime(event.Timestamp)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'ExecutionCompleted':\r\n\r\n                    var nextLine =\r\n                        `${orchestrationName}-->>-${parentOrchestrationName}:[ExecutionCompleted] \\n` +\r\n                        `Note over ${orchestrationName},${parentOrchestrationName}: ${this.formatDuration(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatDateTime(timestamp: string): string {\r\n        if (timestamp.length <= 11) {\r\n            return timestamp;\r\n        }\r\n        return '(' + timestamp.substr(11, 12) + 'Z)';\r\n    }\r\n}","import mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { MermaidDiagramTabState } from './MermaidDiagramTabState';\r\n\r\n// State of Gantt Diagram tab on OrchestrationDetails view\r\nexport class GanttDiagramTabState extends MermaidDiagramTabState {\r\n\r\n    readonly name: string = \"Gantt Chart\";\r\n\r\n    constructor(loadDetails: (orchestrationId: string) => Promise<DurableOrchestrationStatus>) {\r\n        super(loadDetails);\r\n    }\r\n\r\n    protected buildDiagram(details: DurableOrchestrationStatus): Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            Promise.all(this.renderOrchestration(details, true)).then(sequenceLines => {\r\n\r\n                this._diagramCode = 'gantt \\n' +\r\n                    `title ${details.name}(${details.instanceId}) \\n` +\r\n                    'dateFormat YYYY-MM-DDTHH:mm:ss.SSS \\n' +\r\n                    sequenceLines.join('');\r\n\r\n                // Very much unknown, why this line is needed. Without it sometimes the diagrams fail to re-render\r\n                this._diagramSvg = '';\r\n\r\n                try {\r\n\r\n                    mermaid.render('mermaidSvgId', this._diagramCode, (svg) => {\r\n                        this._diagramSvg = svg;\r\n                        resolve();\r\n                    });\r\n                    \r\n                } catch (err) {\r\n                    reject(err);\r\n                }\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    private renderOrchestration(details: DurableOrchestrationStatus, isParentOrchestration: boolean): Promise<string>[] {\r\n\r\n        const results: Promise<string>[] = [];\r\n\r\n        const orchestrationId = details.instanceId;\r\n        const orchestrationName = details.name;\r\n        const historyEvents = details.historyEvents;\r\n\r\n        const startedEvent = historyEvents.find(event => event.EventType == 'ExecutionStarted');\r\n        const completedEvent = historyEvents.find(event => event.EventType == 'ExecutionCompleted');\r\n\r\n        var needToAddAxisFormat = isParentOrchestration;\r\n\r\n        if (!!startedEvent && !!completedEvent) {\r\n\r\n            if (needToAddAxisFormat) {\r\n\r\n                const longerThanADay = completedEvent.DurationInMs > 86400000;\r\n                var nextLine = longerThanADay ? 'axisFormat %Y-%m-%d %H:%M \\n' : 'axisFormat %H:%M:%S \\n';\r\n                results.push(Promise.resolve(nextLine));\r\n                needToAddAxisFormat = false;\r\n            }\r\n            \r\n            var nextLine = isParentOrchestration ? '' : `section ${orchestrationName}(${this.escapeOrchestrationId(orchestrationId)}) \\n`;\r\n\r\n            var lineName = this.formatDuration(completedEvent.DurationInMs);\r\n            if (!lineName) {\r\n                lineName = orchestrationName;\r\n            }\r\n\r\n            nextLine += `${lineName}: ${isParentOrchestration ? '' : 'active,'} ${this.formatDateTime(startedEvent.Timestamp)}, ${this.formatDurationInSeconds(completedEvent.DurationInMs)} \\n`;\r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        if (needToAddAxisFormat) {\r\n\r\n            var nextLine = 'axisFormat %H:%M:%S \\n';\r\n            results.push(Promise.resolve(nextLine));\r\n        }\r\n\r\n        for(var event of historyEvents) {\r\n        \r\n            switch (event.EventType) {\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        const subOrchestrationName = event.FunctionName;\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this._loadDetails(event.SubOrchestrationId).then(details => {\r\n\r\n                                Promise.all(this.renderOrchestration(details, false)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n\r\n                            }, err => {\r\n\r\n                                console.log(`Failed to load ${subOrchestrationName}. ${err.message}`);\r\n                                resolve(`%% Failed to load ${subOrchestrationName}. ${err.message} \\n`);\r\n                            });\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    var nextLine = `${event.FunctionName} ${this.formatDuration(event.DurationInMs)}: done, ${this.formatDateTime(event.ScheduledTime)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    var nextLine = `${event.FunctionName} ${this.formatDuration(event.DurationInMs)}: crit, ${this.formatDateTime(event.ScheduledTime)}, ${this.formatDurationInSeconds(event.DurationInMs)} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private formatDateTime(timestamp: string): string {\r\n\r\n        return timestamp.substr(0, 23);\r\n    }\r\n\r\n    private formatDurationInSeconds(durationInMs: number): string {\r\n\r\n        return Math.round(durationInMs / 1000).toFixed(0) + 's';\r\n    }\r\n\r\n    private escapeOrchestrationId(id: string) {\r\n\r\n        return id.replace(/[:;]/g, ' ');\r\n    }\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ICustomTabState } from './ICustomTabState';\r\n\r\n// State of a custom liquid markup tab on OrchestrationDetails view\r\nexport class LiquidMarkupTabState implements ICustomTabState {\r\n\r\n    name: string = \"\";\r\n    readonly description: string = \"\";\r\n    readonly isMermaidDiagram: boolean = false;\r\n\r\n    @computed\r\n    get rawHtml(): string { return this._rawHtml; };\r\n\r\n    constructor(private _orchestrationId: string, private _backendClient: IBackendClient) {\r\n    }\r\n\r\n    load(details: DurableOrchestrationStatus): Promise<void> {\r\n        \r\n        return new Promise<void>((resolve, reject) => {\r\n\r\n            const uri = `/orchestrations('${this._orchestrationId}')/custom-tab-markup('${this.name}')`;\r\n\r\n            this._backendClient.call('POST', uri).then(response => { \r\n\r\n                this._rawHtml = response;\r\n                resolve();\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _rawHtml: string;\r\n}","import { observable, computed } from 'mobx';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\nimport { SequenceDiagramTabState } from './SequenceDiagramTabState';\r\nimport { ICustomTabState } from './ICustomTabState';\r\nimport { GanttDiagramTabState } from './GanttDiagramTabState';\r\nimport { LiquidMarkupTabState } from './LiquidMarkupTabState';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get selectedTabIndex(): number { return this._selectedTabIndex; }\r\n    set selectedTabIndex(val: number) {\r\n\r\n        this._selectedTabIndex = val;\r\n        this.loadCustomTabIfNeeded();\r\n    }\r\n\r\n    get selectedTab(): ICustomTabState {\r\n        return !this._selectedTabIndex ? null : this._tabStates[this._selectedTabIndex - 1];\r\n    }\r\n\r\n    @observable\r\n    details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._raiseEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._raiseEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @computed\r\n    get setCustomStatusDialogOpen(): boolean { return this._setCustomStatusDialogOpen; }\r\n    set setCustomStatusDialogOpen(val: boolean) {\r\n        this._setCustomStatusDialogOpen = val;\r\n        this.newCustomStatus = !!this.details.customStatus ? JSON.stringify(this.details.customStatus) : '';\r\n    }\r\n\r\n    @computed\r\n    get restartDialogOpen(): boolean { return this._restartDialogOpen; }\r\n    set restartDialogOpen(val: boolean) {\r\n        this._restartDialogOpen = val;\r\n        this.restartWithNewInstanceId = true;\r\n    }\r\n\r\n    @computed\r\n    get isCustomStatusDirty(): boolean { \r\n\r\n        if (!this.details.customStatus) {\r\n            return !!this.newCustomStatus;\r\n        }\r\n\r\n        return this.newCustomStatus !== JSON.stringify(this.details.customStatus);\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n    @observable\r\n    newCustomStatus: string;\r\n    @observable\r\n    restartWithNewInstanceId: boolean = true;\r\n\r\n    @computed\r\n    get tabStates(): ICustomTabState[] { return this._tabStates; }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.details = new DurableOrchestrationStatus();\r\n            this._tabStates = [];\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to purge: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    restart() {\r\n        this.restartDialogOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/restart`;\r\n        const requestBody = { restartWithNewInstanceId: this.restartWithNewInstanceId };\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to restart: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse event data: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    setCustomStatus() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/set-custom-status`;\r\n        var requestBody = null;\r\n\r\n        try {\r\n\r\n            if (!!this.newCustomStatus) {\r\n                requestBody = JSON.parse(this.newCustomStatus);\r\n            }\r\n\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse custom status: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.setCustomStatusDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to set custom status: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n    \r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) {\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n\r\n        this.internalLoadDetails(this._orchestrationId).then(response => {\r\n        \r\n            this.details = response;\r\n\r\n            // Doing auto-refresh\r\n            this.setAutoRefresh();\r\n\r\n            var tabStateIndex = 0;\r\n\r\n            // Loading sequence diagram tab\r\n            if (this.details.entityType === \"Orchestration\") {\r\n               \r\n                if (this._tabStates.length <= tabStateIndex) {\r\n                    this._tabStates.push(new SequenceDiagramTabState((orchId) => this.internalLoadDetails(orchId)));\r\n                    this._tabStates.push(new GanttDiagramTabState((orchId) => this.internalLoadDetails(orchId)));\r\n                }\r\n                tabStateIndex += 2;\r\n            }\r\n\r\n            // Loading custom tabs\r\n            if (!!this.details.tabTemplateNames) {\r\n                for (var templateName of this.details.tabTemplateNames) {\r\n\r\n                    if (this._tabStates.length <= tabStateIndex) {\r\n                        this._tabStates.push(new LiquidMarkupTabState(this._orchestrationId, this._backendClient));\r\n                    }\r\n                    this._tabStates[tabStateIndex].name = templateName;\r\n                    tabStateIndex++;\r\n                }                \r\n            }\r\n\r\n            this._inProgress = false;\r\n\r\n            // Reloading the current custom tab as well\r\n            this.loadCustomTabIfNeeded();\r\n            \r\n        }, err => {\r\n            this._inProgress = false;\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    private loadCustomTabIfNeeded(): void {\r\n\r\n        if (!!this._inProgress || !this.selectedTab) {\r\n            return;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this.selectedTab.load(this.details).then(() => {}, err => { \r\n                \r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Failed to load tab: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    private setAutoRefresh(): void {\r\n\r\n        if (!this._autoRefresh) {\r\n            return;\r\n        }\r\n\r\n        if (!!this._autoRefreshToken) {\r\n            clearTimeout(this._autoRefreshToken);\r\n        }\r\n        this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n    }\r\n\r\n    @observable\r\n    private _tabStates: ICustomTabState[] = [];\r\n\r\n    @observable\r\n    private _selectedTabIndex: number = 0;\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _raiseEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _setCustomStatusDialogOpen: boolean = false;\r\n    @observable\r\n    private _restartDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n\r\n    private internalLoadDetails(orchestrationId: string): Promise<DurableOrchestrationStatus> {\r\n\r\n        const uri = `/orchestrations('${orchestrationId}')`;\r\n        return this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response) {\r\n                throw { message: `Orchestration '${orchestrationId}' not found.` };\r\n            }\r\n\r\n            // Based on backend implementation, this field can appear to be called differently ('historyEvents' vs. 'history')\r\n            // Fixing that here\r\n            if (!!response.history) {\r\n                response.historyEvents = response.history;\r\n            }\r\n\r\n            return response;\r\n        });\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { RuntimeStatus, EntityType } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            this.timeFrom = moment().subtract(1, 'days').utc();\r\n            this.timeTill = moment().utc();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n\r\n            this.entityType = \"Orchestration\";\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return this._statuses.size > 0 && DateTimeHelpers.isValidMoment(this.timeFrom) && DateTimeHelpers.isValidMoment(this.timeTill);\r\n    };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            entityType: this.entityType,\r\n            timeFrom: this.timeFrom.toISOString(),\r\n            timeTill: this.timeTill.toISOString(),\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: moment.Moment;\r\n    @observable\r\n    timeTill: moment.Moment;\r\n\r\n    @observable\r\n    entityType: EntityType = \"Orchestration\";\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { observable, computed } from 'mobx'\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Clean Entity Storage Dialog\r\nexport class CleanEntityStorageDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(isOpen: boolean) {\r\n        this._dialogOpen = isOpen;\r\n\r\n        if (isOpen) {\r\n            this._response = null;\r\n            this.removeEmptyEntities = true;\r\n            this.releaseOrphanedLocks = true;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get response(): CleanEntityStorageResponse | null { return this._response; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return true;\r\n    };\r\n\r\n    @observable\r\n    removeEmptyEntities: boolean;\r\n    @observable\r\n    releaseOrphanedLocks: boolean;\r\n    \r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    clean() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/clean-entity-storage', {\r\n            removeEmptyEntities: this.removeEmptyEntities,\r\n            releaseOrphanedLocks: this.releaseOrphanedLocks\r\n        }).then(response => {\r\n            this._response = response;\r\n        }, err => {\r\n            this.errorMessage = `Clean Entity Storage failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _response: CleanEntityStorageResponse | null = null;\r\n}\r\n\r\nexport class CleanEntityStorageResponse\r\n{\r\n    numberOfEmptyEntitiesRemoved: number;\r\n    numberOfOrphanedLocksRemoved: number;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n            } else {\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    get routePrefixAndTaskHubName(): string { return null; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n\r\n                try {\r\n                    requestHandler(message.data);\r\n                } catch(err) {\r\n                    console.log('Failed to handle response from VsCode: ' + err);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.err) {\r\n                requestPromise.reject(message.err);\r\n            } else {\r\n                requestPromise.resolve(message.data);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setCustomHandlers(purgeHistoryHandler: () => void, cleanEntityStorageHandler: () => void) {\r\n\r\n        this._handlers['purgeHistory'] = purgeHistoryHandler;\r\n        this._handlers['cleanEntityStorage'] = cleanEntityStorageHandler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const StateFromVsCode: {};\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n        this._state = StateFromVsCode[this._prefix];\r\n        if (!this._state) {\r\n            this._state = {};\r\n        }\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        this._state[fieldName] = value\r\n        this.save();\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete this._state[item.fieldName];\r\n            } else {\r\n                this._state[item.fieldName] = item.value;\r\n            }\r\n        }\r\n\r\n        this.save();\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n\r\n        return this._state[fieldName];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete this._state[fieldName];\r\n        this.save();\r\n    }\r\n\r\n    private readonly _state: any;\r\n\r\n    private save(): void {\r\n        this._vsCodeApi.postMessage({ method: 'PersistState', key: this._prefix, data: this._state });\r\n    }\r\n}\r\n","import { observable, computed } from 'mobx';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { BackendClient } from '../services/BackendClient';\r\nimport { LoginState, OrchestrationsPathPrefix } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { CleanEntityStorageDialogState } from './CleanEntityStorageDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n    cleanEntityStorageDialogState: CleanEntityStorageDialogState;\r\n\r\n    @computed\r\n    get typedInstanceId(): string {\r\n        return this._typedInstanceId;\r\n    }\r\n    set typedInstanceId(s: string) {\r\n        this._typedInstanceId = s;\r\n        this.reloadSuggestions();\r\n    }\r\n\r\n    @computed\r\n    get suggestions(): string[] {\r\n        return this._suggestions;\r\n    }\r\n\r\n    @computed\r\n    get isExactMatch(): boolean {\r\n        return this._suggestions.length === 1 && this._suggestions[0] === this._typedInstanceId;\r\n    }\r\n    \r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n            } else {\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setCustomHandlers(\r\n                    () => this.purgeHistoryDialogState.dialogOpen = true,\r\n                    () => this.cleanEntityStorageDialogState.dialogOpen = true\r\n                );\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(() => this.loginState.taskHubName, () => this.loginState.getAuthorizationHeaderAsync());\r\n            this._backendClient = backendClient;\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n            this.cleanEntityStorageDialogState = new CleanEntityStorageDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState, this.cleanEntityStorageDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Opens the entered orchestrationId in a new tab\r\n    goto() {\r\n        window.open(`${this._backendClient.routePrefixAndTaskHubName}${OrchestrationsPathPrefix}${this._typedInstanceId}`);\r\n        this._typedInstanceId = '';\r\n        this._suggestions = [];\r\n    }\r\n\r\n    @observable\r\n    private _suggestions: string[] = [];\r\n    @observable\r\n    private _typedInstanceId: string = '';\r\n\r\n    private readonly _backendClient: IBackendClient;\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get orchestrationId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const pos = window.location.pathname.lastIndexOf(OrchestrationsPathPrefix);\r\n        if (pos < 0) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(pos + OrchestrationsPathPrefix.length);\r\n    }\r\n\r\n    // Reloads list of suggested instanceIds\r\n    private reloadSuggestions(): void {\r\n\r\n        if (!this._typedInstanceId || this._typedInstanceId.length < 2) {\r\n            this._suggestions = [];\r\n            return;\r\n        }\r\n\r\n        const uri = `/id-suggestions(prefix='${this._typedInstanceId}')`;\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response || !this._typedInstanceId) {\r\n                this._suggestions = [];\r\n            } else {\r\n                this._suggestions = response;\r\n            }\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport './index.css';\r\n\r\nimport { Main } from './components/Main';\r\nimport { MainState } from './states/MainState';\r\nimport { Theme } from './theme';\r\n\r\ndocument.body.style.backgroundColor = Theme.palette.background.paper;\r\n\r\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\r\nconst appState = new MainState();\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={Theme} >\r\n        <Main state={appState} />\r\n    </ThemeProvider>,\r\n    document.getElementById('root') as HTMLElement\r\n);"],"sourceRoot":""}